// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @db.VarChar(36)
  email     String   @unique
  name      String
  image     String?
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Pet       Pet[]

  @@map("users")
}

enum SpecieEnum {
  dog
  cat
}

enum GenderEnum {
  male
  female
}

enum StatusEnum {
  available
  pending
  adopted
}

model Pet {
  id          String     @id @default(uuid()) @db.VarChar(36)
  name        String
  specie      SpecieEnum
  breed       String
  ageInMonths Int        @map("age_in_months")
  gender      GenderEnum
  status      StatusEnum
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  adoptedAt   DateTime?  @map("adopted_at")
  adoptedBy   String?     @map("adopted_by")
  locationId  String     @map("location_id")
  location    Location   @relation(fields: [locationId], references: [id], onDelete: Cascade)
  user        User?      @relation(fields: [adoptedBy], references: [id], onDelete: Cascade)
  photos      Photo[]

  @@map("pets")
}

model Location {
  id   String @id @default(uuid()) @db.VarChar(36)
  city String
  pets Pet[]

  @@map("locations")
}

model Photo {
  id    String @id @default(uuid()) @db.VarChar(36)
  petId String @map("pet_id")
  image String
  pet   Pet    @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@map("photos")
}
